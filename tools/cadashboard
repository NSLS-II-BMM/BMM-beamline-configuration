#!/usr/bin/env python3

import sys, os, signal, epics, json
from time import sleep
from termcolor import colored
sys.path.append('/home/xf06bm/git/BMM-beamline-configuration/tools/python')
from BMMcontrols import Mirror
exec(open('/home/xf06bm/.ipython/profile_collection/startup/BMM/dcm_parameters.py').read())
BMM_dcm = dcm_parameters()
import datetime, time
from numpy import pi, sin, cos, arcsin, deg2rad
HBARC = 1973.27053324

import redis
redis_host = 'xf06bm-ioc2'
rkvs = redis.Redis(host=redis_host, port=6379, db=0)

xrd = False
try:
    if sys.argv[1].lower() == 'xrd':
        xrd = True
except:
    pass

maintenance = False
try:
    if 'main' in sys.argv[1].lower():
        maintenance = True
except:
    pass




def writeline(string):
    #sys.stdout.write('\r')
    #sys.stdout.flush()
    #os.system('clear')
    print('\n\n')
    sys.stdout.write(string)
    sys.stdout.flush()

def signal_handler(sig, frame):
    print('\nQuitting cadashboard. Bye.')
    sys.exit(0)  
signal.signal(signal.SIGINT, signal_handler)


# heartbeat = '<^>v'  # '.o0o' # '-\|/'
heartbeat = ['|-     |',
             '| -    |',
             '|  -   |', 
             '|   -  |', 
             '|    - |', 
             '|     -|', 
             '|    - |', 
             '|   -  |', 
             '|  -   |', 
             '| -    |',
             ]
count = 0;

## ----- various PVs and other scalars
i0           = epics.PV('XF:06BM-BI{EM:2}EM180:Current1:MeanValue_RBV')
it           = epics.PV('XF:06BM-BI{EM:2}EM180:Current2:MeanValue_RBV')
ir           = epics.PV('XF:06BM-BI{EM:2}EM180:Current3:MeanValue_RBV')
iy           = epics.PV('XF:06BM-BI{EM:2}EM180:Current4:MeanValue_RBV')
#bicron       = epics.PV('XF:06BM-ES:1{Sclr:1}.S25')
ring_current = epics.PV('SR:OPS-BI{DCCT:1}I:Real-I')

if maintenance is False:
    bl           = epics.PV('SR:C06-EPS{PLC:1}Sts:BM_BE_Enbl-Sts')
    bmps         = epics.PV('SR:C06-EPS{PLC:1}Sts:BM_BMPS_Opn-Sts')
    sha          = epics.PV('XF:06BM-PPS{Sh:FE}Pos-Sts')
    shb          = epics.PV('XF:06BM-PPS{Sh:A}Pos-Sts')

bragg        = epics.Motor('XF:06BMA-OP{Mono:DCM1-Ax:Bragg}Mtr')
dcmx         = epics.Motor('XF:06BMA-OP{Mono:DCM1-Ax:X}Mtr')
#m2           = Mirror(2)
sample       = {'x'     : epics.Motor('XF:06BMA-BI{XAFS-Ax:LinX}Mtr'),
                'y'     : epics.Motor('XF:06BMA-BI{XAFS-Ax:LinY}Mtr'),
                'wheel' : epics.Motor('XF:06BMA-BI{XAFS-Ax:RotB}Mtr'),
                'garot' : epics.Motor('XF:06BMA-BI{XAFS-Ax:Mtr8}Mtr'),
                'pitch' : epics.Motor('XF:06BMA-BI{XAFS-Ax:Roll}Mtr'),
                'ref'   : epics.Motor('XF:06BMA-BI{XAFS-Ax:Ref}Mtr'),
                'refx'  : epics.Motor('XF:06BMA-BI{XAFS-Ax:RefX}Mtr'),
                'det'   : epics.Motor('XF:06BMA-BI{XAFS-Ax:LinS}Mtr')}
vac          = [epics.PV("XF:06BMA-VA{FS:1-CCG:1}P:Raw-I"),
                epics.PV("XF:06BMA-VA{Mono:DCM-CCG:1}P:Raw-I"),
                epics.PV("XF:06BMA-VA{FS:2-CCG:1}P:Raw-I"),
                epics.PV("XF:06BMA-VA{Mir:2-CCG:1}P:Raw-I"),
                epics.PV("XF:06BMA-VA{Mir:3-CCG:1}P:Raw-I"),
                epics.PV("XF:06BMB-VA{BT:1-CCG:1}P:Raw-I"),
                epics.PV("XF:06BMB-VA{FS:3-CCG:1}P:Raw-I")]

temperatures = [epics.PV('XF:06BMA-OP{Mono:DCM-Crys:1}T-I-I'),
                epics.PV('XF:06BMA-OP{Mono:DCM-Crys:2}T-I-I'),
                epics.PV('XF:06BMA-OP{Mono:DCM-Crys:1-Ax:R}T-I-I'),
                epics.PV('XF:06BMA-OP{Mono:DCM-Crys:2-Ax:P}T-I-I'),
                epics.PV('XF:06BMA-OP{Mono:DCM-Crys:2-Ax:R}T-I-I'),
                epics.PV('XF:06BMA-OP{Mono:DCM-Crys:2-Ax:Perp}T-I-I'),
                epics.PV('XF:06BMA-OP{Mono:DCM-Crys:2-Ax:Para}T-I-I'),
                epics.PV('XF:06BMA-OP{Mir:2}T:1-I-I'),
                epics.PV('XF:06BMA-OP{Mir:2}T:2-I-I'),
                epics.PV('XF:06BMA-OP{Mir:3}T:1-I-I'),
                epics.PV('XF:06BMA-OP{Mir:3}T:2-I-I'),]

if maintenance is False:
    fe_valves    = [epics.PV('FE:C06B-VA{GV:1}DB:Pos-Sts'),
                    epics.PV('FE:C06B-VA{GV:2}DB:Pos-Sts'),
                    epics.PV('FE:C06B-VA{GV:3}DB:Pos-Sts'),]
valves       = [epics.PV('XF:06BMA-VA{FS:1-GV:1}Pos-Sts'),
                epics.PV('XF:06BMA-VA{BS:PB-GV:1}Pos-Sts'),
                epics.PV('XF:06BMA-VA{FS:2-GV:1}Pos-Sts'),
                epics.PV('XF:06BMA-VA{Mir:2-GV:1}Pos-Sts'),
                epics.PV('XF:06BMA-VA{Mir:3-GV:1}Pos-Sts'),
                epics.PV('XF:06BMB-VA{BT:1-GV:1}Pos-Sts'), ]

if xrd is True:
    delta         = epics.Motor('XF:06BM-ES{SixC-Ax:VTTH}Mtr')
    eta           = epics.Motor('XF:06BM-ES{SixC-Ax:VTH}Mtr')
    chi           = epics.Motor('XF:06BM-ES{SixC-Ax:CHI}Mtr')
    phi           = epics.Motor('XF:06BM-ES{SixC-Ax:PHI}Mtr')
    mu            = epics.Motor('XF:06BM-ES{SixC-Ax:HTH}Mtr')
    nu            = epics.Motor('XF:06BM-ES{SixC-Ax:HTTH}Mtr')

slits         = [epics.Motor('XF:06BM-BI{Slt:02-Ax:O}Mtr'),
                 epics.Motor('XF:06BM-BI{Slt:02-Ax:I}Mtr'),
                 epics.Motor('XF:06BM-BI{Slt:02-Ax:T}Mtr'),
                 epics.Motor('XF:06BM-BI{Slt:02-Ax:B}Mtr')]

def vac_string():
    string = ''
    for count, pv in enumerate(vac):
        if pv.get() == 'LO<E-11':
            color = 'blue'
        elif pv.get() in ('OFF', 'WAIT', 'PROT_OFF'):
            color = 'blue'
        elif float(pv.get()) > 5.0e-7:
            color = 'red'
        elif float(pv.get()) > 9.0e-8:
            color = 'yellow'
        else:
            color =  'green'
        string += colored('%d' % (count+1), color, attrs=['bold'])
    return string

def temperature_string():
    def talarm_state(index):
        if index < 2:
            return float(temperatures[index].get()) > float(temperatures[index].upper_warning_limit)
        else:
            return float(temperatures[index].get()) > 0.62*float(temperatures[index].upper_warning_limit)

    string = '('
    color = 'red' if talarm_state(0) else 'green'
    string += colored('111 ', color, attrs=['bold'])
    color = 'red' if talarm_state(1) else 'green'
    string += colored('311 ', color, attrs=['bold'])
    color = 'red' if talarm_state(2) else 'green'
    string += colored('Co ',  color, attrs=['bold'])
    color = 'red' if talarm_state(3) else 'green'
    string += colored('P2 ',  color, attrs=['bold'])
    color = 'red' if talarm_state(4) else 'green'
    string += colored('R2 ',  color, attrs=['bold'])
    color = 'red' if talarm_state(5) else 'green'
    string += colored('Pe ',  color, attrs=['bold'])
    color = 'red' if talarm_state(6) else 'green'
    string += colored('Pa',   color, attrs=['bold'])
    string += ') ('
    color = 'red' if talarm_state(7) else 'green'
    string += colored('U2 ',  color, attrs=['bold'])
    color = 'red' if talarm_state(8) else 'green'
    string += colored('D2',   color, attrs=['bold'])
    string += ') ('
    color = 'red' if talarm_state(9) else 'green'
    string += colored('U3 ',  color, attrs=['bold'])
    color = 'red' if talarm_state(10) else 'green'
    string += colored('D3',   color, attrs=['bold']) + ')'
    return string

def valves_string():
    global maintenance
    string = 'FE:'
    #if maintenance is False:
    #    string += colored('123', 'red', attrs=['bold'])
    try:
        for count, pv in enumerate(fe_valves):
            color = 'green' if fe_valves[count].get() == 1 else 'red'
            string += colored('%d' % (count+1), color, attrs=['bold'])
    except:
        string += colored('123', 'red', attrs=['bold'])
    string += ' BL:'
    for count, pv in enumerate(valves):
        color = 'green' if valves[count].get() == 1 else 'red'
        string += colored('%d' % (count+1), color, attrs=['bold'])
    return string

def determine_reference():
    mapping = json.loads(rkvs.get('BMM:reference:mapping').decode('utf-8'))
    slot  = round((-15+sample['ref'].RBV) / (-15)) % 24
    refx = sample['refx'].RBV
    if refx < -10:
        ring = 0
    else:
        ring = 1
    for k in mapping.keys():
        if mapping[k][0] == ring and mapping[k][1] == slot and 'empty' not in k:
            return k
    return 'None'

def remaining():
    elapsed = (datetime.datetime.timestamp(datetime.datetime.now()) - float(rkvs.get('BMM:scan:starttime').decode('utf8')))
    try:
        estimate = float(rkvs.get('BMM:scan:estimated'))
    except:
        return ''
    if estimate == 0:
        return ''
    remaining = estimate - elapsed
    if remaining < 0:
        return '(almost done)'
    minutes = int(remaining/60.)
    seconds = round(remaining - minutes*60)
    return f'({minutes} min, {seconds} sec)'

exec(open('/home/xf06bm/.ipython/profile_collection/startup/BMM/dcm_parameters.py').read())

#pattern = "%Y-%m-%dT%H-%M-%S"
strut = u'\u25CF'
triangle = u'\u227b' # 5BA'

print('\n')
waiting = True
while waiting:

    count += 1
    count = count % len(heartbeat)
    #xrd = False
    #if m2.vert < 0 and m2.pitch > 3:
    #    xrd = True
    
    ## ----- shutters and ring current
    if maintenance is True:
        bl_show = colored('Dis', 'red', attrs=['bold'])
        bmps_show = colored('BMPS', 'red', attrs=['bold'])
        sha_show = colored('A shutter', 'red', attrs=['bold'])
        shb_show = colored('B shutter', 'red', attrs=['bold'])
    else:
        if bl.get() == 0:
            bl_show = colored('Dis', 'red', attrs=['bold'])
        else:
            bl_show = colored('Ena', 'green', attrs=['bold'])

        if bmps.get() == 0:
            bmps_show = colored('BMPS', 'red', attrs=['bold'])
        else:
            bmps_show = colored('BMPS', 'green', attrs=['bold'])

        if sha.get() == 1:
            sha_show = colored('A shutter', 'red', attrs=['bold'])
        else:
            sha_show = colored('A shutter', 'green', attrs=['bold'])

        if shb.get() == 1:
            shb_show = colored('B shutter', 'red', attrs=['bold'])
        else:
            shb_show = colored('B shutter', 'green', attrs=['bold'])

    if maintenance is True:
        ring_show = colored('maint', 'red', attrs=None)
    else:
        try:
            if ring_current.get() > 100:
                ring_show = colored('%5.1f mA' % ring_current.get(), 'cyan', attrs=None)
            else:
                ring_show = colored('%5.1f mA' % ring_current.get(), 'cyan', attrs=None)
        except:
                ring_show = colored(' ??? ', 'red', attrs=None)

    ## ----- ion chamber signals
    i0val = 0
    try:
        i0val = i0.get()*10**9
    except:
        pass
    itval = 0
    try:
        itval = it.get()*10**9
    except:
        pass
    irval = 0
    try:
        irval = ir.get()*10**9
    except:
        pass
    iyval = 0
    try:
        iyval = iy.get()*10**9
    except:
        pass
    
    ## ----- current time for time updates
    scan =     colored('   idle   ', 'grey', 'on_white')
    scantype = rkvs.get('BMM:scan:type').decode('utf-8')
    if xrd:
        scan = colored('not in use', 'grey', 'on_white')
        scantype = 'idle'
    else:
        ## ----- type of scan (xafs | line | area | time)
        if scantype == 'xafs':
            backdrop = 'on_magenta'
        elif scantype == 'line':
            backdrop = 'on_cyan'
        elif scantype == 'area':
            backdrop = 'on_yellow'
        elif scantype == 'time':
            backdrop = 'on_blue'
        if scantype != 'idle':
            scan = colored(f'{scantype} scan {remaining()}', 'white', backdrop)

    ## ----- update the energy
    if dcmx.RBV < 10:
        current_energy = (2*pi*HBARC) / (2*BMM_dcm.dspacing_111*sin(deg2rad(bragg.RBV)))
    else:
        current_energy = (2*pi*HBARC) / (2*BMM_dcm.dspacing_311*sin(deg2rad(bragg.RBV)))
    #current_energy = (2*pi*HBARC) / (2*BMM_dcm.dspacing_111*sin(deg2rad(bragg.RBV)))

    
    ## ----- update the display
    if xrd:
        #                 shutters        current       vacuum, temperatures, gate valves
        template = " [%s] [%s] [%s] [%s]  ring: %s  %s  %s: %s %s %s: %s %s %s: %s" + \
                   "\n %s: %s  %s  %s: %6d counts                                                                        %s: %s" + \
                   "\n %s %s: %8.3f | %s: %8.3f | %s: %8.3f | %s: %8.3f | %s: %8.3f | %s: %8.3f            %s"
        try:
            writeline(template  %
                      (bl_show, bmps_show, sha_show, shb_show, ring_show, strut,
                       colored('Vac', 'white', attrs=['bold']), vac_string(), strut,
                       colored('TC', 'white', attrs=['bold']), temperature_string(), strut,
                       colored('GV', 'white', attrs=['bold']), valves_string(),

                       colored('mono', 'white', attrs=['bold']), colored('%.1f eV' % current_energy, 'cyan', attrs=['bold']), strut,
                       colored('Bicron', 'white', attrs=['bold']), int(bicron.get()),
                       colored('XAS',  'white', attrs=['bold']), scan,
                   
                       colored('Goniometer '+triangle, 'yellow', attrs=['bold']),
                       u'\u03B4', delta.RBV,
                       u'\u03B7', eta.RBV,
                       u'\u03C7', chi.RBV,
                       u'\u03C6', phi.RBV,
                       u'\u03BC', mu.RBV,
                       u'\u03BD', nu.RBV,

                       heartbeat[count]
                   ))
        except:
            pass
        sleep(1.0)
    else:
        #                 shutters        current       vacuum, temperatures, gate valves
        template = " [%s] [%s] [%s] [%s]  ring: %s  %s  %s: %s %s %s: %s %s %s: %s" + \
                   "\n %s: %s  %s %s %2s %2s  %s: %7.3f nA   %s: %7.3f nA   %s: %7.3f nA                           %s %s" + \
                   "\n %s X: %8.3f  | Y: %7.3f  | %s: %2d | pitch: %7.3f  | ref: %4s  | det: %5.1f | slits: %5.2f x %5.2f  %s"
        #try:
        thisinst = rkvs.get('BMM:automation:type').decode('utf-8')
        if 'glancing' in thisinst:
            instrument = 'spnnr'
            cur = sample['garot'].RBV % 360
            slot = (9-round(cur/45)) % 8
        # elif 'wheel' in thisinst:
        #    instrument = 'wheel'
        #    slot = round((15+sample['wheel'].RBV) / (-15)) % 24
        #    
        else:
            instrument = 'wheel'
            slot = round((15+sample['wheel'].RBV) / (-15)) % 24
        #ref  = round((-15+sample['ref'].RBV) / (-15)) % 24
        #ref = rkvs.lindex('BMM:reference:list', ref-1).decode('utf-8')
        ref = determine_reference()
        if slot == 0: slot = 24
        writeline(template  %
                      (bl_show, bmps_show, sha_show, shb_show, ring_show, strut,
                       colored('Vac',  'white', attrs=['bold']), vac_string(), strut,
                       colored('TC',   'white', attrs=['bold']), temperature_string(), strut,
                       colored('GV',   'white', attrs=['bold']), valves_string(),
                       
                       colored('mono', 'white', attrs=['bold']), colored('%.1f eV' % current_energy, 'cyan', attrs=['bold']), strut,
                       colored(rkvs.get('BMM:pds:element').decode('utf-8'), 'yellow', attrs=['bold']),
                       colored(rkvs.get('BMM:pds:edge').decode('utf-8'), 'yellow', attrs=['bold']), strut, 
                       colored('I0',   'white', attrs=['bold']), i0val,
                       colored('It',   'white', attrs=['bold']), itval,
                       colored('Ir',   'white', attrs=['bold']), irval,
                       #colored('Iy',   'white', attrs=['bold']), iyval,
                       colored('XAS',  'white', attrs=['bold']), scan,
                       
                       colored('Sample '+triangle, 'yellow', attrs=['bold']), sample['x'].RBV, sample['y'].RBV,
                       instrument, slot, sample['pitch'].RBV, str(ref), sample['det'].RBV,
                       slits[0].RBV-slits[1].RBV, slits[2].RBV-slits[3].RBV, heartbeat[count],
                   ))
        #except:
        #    pass
        sleep(1.0)
